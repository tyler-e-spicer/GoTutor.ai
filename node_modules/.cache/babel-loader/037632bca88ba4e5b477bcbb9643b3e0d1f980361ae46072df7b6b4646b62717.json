{"ast":null,"code":"export default function isCaptured(board, currentMove, opponentNeighbors) {\n  if (!opponentNeighbors) return;\n  const toInspect = [...opponentNeighbors];\n  // console.log('toInspect ', toInspect)\n  const checked = [];\n  const alliedStone = currentMove % 2 === 0 ? \"⚫\" : \"⚪\";\n  // console.log('alliedStone ', alliedStone)\n\n  while (toInspect.length) {\n    const currentIntersection = toInspect.pop();\n    console.log(\"currentIntersection \", currentIntersection);\n    // right\n    if (board[currentIntersection + 1] && board[currentIntersection + 1].stone === null) {\n      // console.log(board[currentIntersection + 1].stone)\n      console.log(\"intersection \", board[currentIntersection + 1]);\n      console.log(\"right\");\n      return false;\n    } else if (board[currentIntersection + 1] && board[currentIntersection + 1].stone === alliedStone) {\n      if (!checked.includes(currentIntersection + 1)) toInspect.push(currentIntersection + 1);\n    }\n    if (board[currentIntersection - 1] && board[currentIntersection - 1].stone === null) {\n      // console.log(board[currentIntersection - 1].stone)\n      console.log(\"intersection \", board[currentIntersection - 1]);\n      console.log(\"left\");\n      return false;\n    } else if (board[currentIntersection - 1] && board[currentIntersection - 1].stone === alliedStone) {\n      if (!checked.includes(currentIntersection - 1)) toInspect.push(currentIntersection - 1);\n    }\n\n    // console.log(board[currentIntersection + 3].stone)\n\n    if (board[currentIntersection + 19] && board[currentIntersection + 19].stone === null) {\n      // console.log(board[currentIntersection + 3].stone)\n      console.log(\"intersection \", board[currentIntersection + 19]);\n      console.log(\"bottom\");\n      return false;\n    } else if (board[currentIntersection + 19] && board[currentIntersection + 19].stone === alliedStone) {\n      if (!checked.includes(currentIntersection + 19)) toInspect.push(currentIntersection + 19);\n    }\n    if (board[currentIntersection - 19] && board[currentIntersection - 19].stone === null) {\n      console.log(\"intersection \", board[currentIntersection - 19]);\n      console.log(\"top\");\n      return false;\n    } else if (board[currentIntersection - 19] && board[currentIntersection - 19].stone === alliedStone) {\n      if (!checked.includes(currentIntersection - 19)) toInspect.push(currentIntersection - 19);\n    }\n    checked.push(currentIntersection);\n  }\n  return checked;\n}","map":{"version":3,"names":["isCaptured","board","currentMove","opponentNeighbors","toInspect","checked","alliedStone","length","currentIntersection","pop","console","log","stone","includes","push"],"sources":["/Users/tylerspicer/Desktop/Codesmith/solo-project/src/utils/is-captured.ts"],"sourcesContent":["import { StarPoint } from \"../../types\";\n\nexport default function isCaptured(board: StarPoint[], currentMove: number, opponentNeighbors: Number[]) {\n  if (!opponentNeighbors) return;\n\n  const toInspect = [...opponentNeighbors];\n  // console.log('toInspect ', toInspect)\n  const checked: Number[] = []; \n  const alliedStone = currentMove % 2 === 0 ? \"⚫\" : \"⚪\";\n  // console.log('alliedStone ', alliedStone)\n\n  while (toInspect.length) {\n    const currentIntersection = toInspect.pop();\n    console.log(\"currentIntersection \", currentIntersection);\n    // right\n    if (\n      board[currentIntersection + 1] &&\n      board[currentIntersection + 1].stone === null\n    ) {\n      // console.log(board[currentIntersection + 1].stone)\n      console.log(\"intersection \", board[currentIntersection + 1]);\n      console.log(\"right\");\n      return false;\n    } else if (\n      board[currentIntersection + 1] &&\n      board[currentIntersection + 1].stone === alliedStone\n    ) {\n      if (!checked.includes(currentIntersection + 1))\n        toInspect.push(currentIntersection + 1);\n    }\n\n    if (\n      board[currentIntersection - 1] &&\n      board[currentIntersection - 1].stone === null\n    ) {\n      // console.log(board[currentIntersection - 1].stone)\n      console.log(\"intersection \", board[currentIntersection - 1]);\n      console.log(\"left\");\n      return false;\n    } else if (\n      board[currentIntersection - 1] &&\n      board[currentIntersection - 1].stone === alliedStone\n    ) {\n      if (!checked.includes(currentIntersection - 1))\n        toInspect.push(currentIntersection - 1);\n    }\n\n    // console.log(board[currentIntersection + 3].stone)\n\n    if (\n      board[currentIntersection + 19] &&\n      board[currentIntersection + 19].stone === null\n    ) {\n      // console.log(board[currentIntersection + 3].stone)\n      console.log(\"intersection \", board[currentIntersection + 19]);\n      console.log(\"bottom\");\n      return false;\n    } else if (\n      board[currentIntersection + 19] &&\n      board[currentIntersection + 19].stone === alliedStone\n    ) {\n      if (!checked.includes(currentIntersection + 19))\n        toInspect.push(currentIntersection + 19);\n    }\n\n    if (\n      board[currentIntersection - 19] &&\n      board[currentIntersection - 19].stone === null\n    ) {\n      console.log(\"intersection \", board[currentIntersection - 19]);\n      console.log(\"top\");\n      return false;\n    } else if (\n      board[currentIntersection - 19] &&\n      board[currentIntersection - 19].stone === alliedStone\n    ) {\n      if (!checked.includes(currentIntersection - 19))\n        toInspect.push(currentIntersection - 19);\n    }\n\n    checked.push(currentIntersection);\n  }\n  return checked;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}