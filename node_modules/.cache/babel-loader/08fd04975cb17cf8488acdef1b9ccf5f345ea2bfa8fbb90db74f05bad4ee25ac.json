{"ast":null,"code":"var _jsxFileName = \"/Users/tylerspicer/Desktop/Codesmith/solo-project/src/components/goboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// component imports\nimport Intersection from \"./intersection\";\nimport BackArrow from \"./back-arrow\";\nimport ForwardArrow from \"./forward-arrow\";\nimport PassButton from \"./pass-button\";\nimport SaveButton from \"./save-button\";\nimport StyleBGButton from \"./style-button\";\nimport playstone from \"../assets/playstone.mp3\";\nimport CurrentPlayer from \"./current-player\";\nimport TutorButton from \"./tutor-button\";\nimport Handicap from \"./handicap\";\nimport UserComponent from \"./current-user\";\n\n// utils imports\nimport newBoard from \"../utils/board-functions\";\nimport findOpponentNeighbors from \"../utils/find-neighbors\";\nimport isCaptured from \"../utils/is-captured\";\nimport { forwardInTime, backInTime } from \"../utils/time-travel\";\n\n// accepts array of opponent stones and scans the groups looking for liberties (false) or\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GoBoard() {\n  _s();\n  const [history, setHistory] = useState(newBoard());\n  const [pastMoves, setPastMoves] = useState([newBoard()]);\n  const [currentMove, setCurrentMove] = useState(1);\n  const [whiteStones, setWhiteStones] = useState([]);\n  const [blackStones, setBlackStones] = useState([]);\n  const [passCount, setPassCount] = useState(1);\n  const [handicapLevel, setHandicapLevel] = useState(0);\n  const [blackCaptures, setBlackCaptures] = useState(0);\n  const [whiteCaptures, setWhiteCaptures] = useState(0);\n  let blackIsNext = currentMove % 2 !== 0;\n\n  // console.log(history)\n\n  function playStone(index) {\n    const audio = new Audio(playstone);\n    const updatedHistory = history.slice();\n    const intersectionName = updatedHistory[index].name;\n    setPassCount(0);\n    if (whiteStones.includes(intersectionName) || blackStones.includes(intersectionName)) {\n      return;\n    }\n    audio.play();\n    if (blackIsNext) {\n      updatedHistory[index].stone = \"⚫\";\n      setBlackStones(prevBlackStones => {\n        const updatedBlackStones = [...prevBlackStones, intersectionName];\n        return updatedBlackStones;\n      });\n    } else {\n      updatedHistory[index].stone = \"⚪\";\n      setWhiteStones(prevWhiteStones => {\n        const updatedWhiteStones = [...prevWhiteStones, intersectionName];\n        return updatedWhiteStones;\n      });\n    }\n\n    // capture logic before updating state\n    // console.log('index ', index)\n    const opponentNeighbors = findOpponentNeighbors(history, index, currentMove);\n\n    // console.log('opponentNeighbors', opponentNeighbors);\n    // console.log('currentMove ', currentMove, 'opponentNeighbors ', opponentNeighbors)\n\n    // console.log(\"updatedHistory \", updatedHistory);\n\n    const capturedResult = isCaptured(updatedHistory, currentMove, opponentNeighbors);\n\n    // console.log(\"capturedResult\", capturedResult);\n    // console.log('history before for loop ', history);\n\n    if (capturedResult) {\n      for (const position of updatedHistory) {\n        if (capturedResult.includes(updatedHistory.indexOf(position))) {\n          position.stone = null;\n        }\n      }\n    }\n\n    // console.log('history after for loop ', history);\n    // need to update white & black stone arrays\n    //update state once board has accounted for captures\n    // console.log(\"capturedResult length: \", capturedResult.length);\n\n    if (blackIsNext && capturedResult) {\n      setBlackCaptures(blackCaptures + capturedResult.length);\n    } else if (!blackIsNext && capturedResult) {\n      setWhiteCaptures(whiteCaptures + capturedResult.length);\n    }\n    setCurrentMove(currentMove + 1);\n    setHistory(updatedHistory);\n    const pastMovesForUpdate = [...pastMoves];\n    pastMovesForUpdate.push(JSON.parse(JSON.stringify(history)));\n    setPastMoves(pastMovesForUpdate);\n  }\n  function handicapClick() {\n    const starPoints = [\"Q16\", \"D4\", \"Q4\", \"D16\", \"Q10\", \"D10\", \"K16\", \"K4\", \"K10\"];\n    const starIndices = [72, 288, 300, 60, 186, 174, 66, 294, 180];\n    const startingHistory = history.slice(); // shallow copy\n\n    for (const intersection of startingHistory) {\n      if (intersection.name === starPoints[handicapLevel] && handicapLevel < starPoints.length) {\n        intersection.stone = \"⚪\";\n        console.log(\"intersection \", intersection);\n      }\n    }\n    setHistory(startingHistory);\n    setCurrentMove(1);\n    setHandicapLevel(handicapLevel + 1);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-image\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"go-board\",\n        children: [/*#__PURE__*/_jsxDEV(BackArrow, {\n          onBackClick: () => backInTime(currentMove, pastMoves, setHistory, setCurrentMove)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyleBGButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ForwardArrow, {\n          onForwardClick: () => forwardInTime(currentMove, pastMoves, setHistory, setCurrentMove)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UserComponent, {\n          whiteCaptures: whiteCaptures,\n          blackCaptures: blackCaptures,\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), history.map((intersection, index) => /*#__PURE__*/_jsxDEV(Intersection, {\n          index: index,\n          name: intersection.name,\n          stone: intersection.stone,\n          onIntersectionClick: () => playStone(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(TutorButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Handicap, {\n          onHandicapClick: () => handicapClick(handicapLevel, history)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CurrentPlayer, {\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PassButton, {\n          passCount: passCount,\n          setPassCount: setPassCount,\n          currentMove: currentMove,\n          setCurrentMove: setCurrentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SaveButton, {\n          pastMoves: pastMoves,\n          blackIsNext: blackIsNext,\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(GoBoard, \"qRcYRwCSYf0dRF+BLv28e0tl1Gc=\");\n_c = GoBoard;\nexport default GoBoard;\nvar _c;\n$RefreshReg$(_c, \"GoBoard\");","map":{"version":3,"names":["React","useState","Intersection","BackArrow","ForwardArrow","PassButton","SaveButton","StyleBGButton","playstone","CurrentPlayer","TutorButton","Handicap","UserComponent","newBoard","findOpponentNeighbors","isCaptured","forwardInTime","backInTime","jsxDEV","_jsxDEV","Fragment","_Fragment","GoBoard","_s","history","setHistory","pastMoves","setPastMoves","currentMove","setCurrentMove","whiteStones","setWhiteStones","blackStones","setBlackStones","passCount","setPassCount","handicapLevel","setHandicapLevel","blackCaptures","setBlackCaptures","whiteCaptures","setWhiteCaptures","blackIsNext","playStone","index","audio","Audio","updatedHistory","slice","intersectionName","name","includes","play","stone","prevBlackStones","updatedBlackStones","prevWhiteStones","updatedWhiteStones","opponentNeighbors","capturedResult","position","indexOf","length","pastMovesForUpdate","push","JSON","parse","stringify","handicapClick","starPoints","starIndices","startingHistory","intersection","console","log","children","className","onBackClick","fileName","_jsxFileName","lineNumber","columnNumber","onForwardClick","map","onIntersectionClick","onHandicapClick","_c","$RefreshReg$"],"sources":["/Users/tylerspicer/Desktop/Codesmith/solo-project/src/components/goboard.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\n// component imports\nimport Intersection from \"./intersection\";\nimport BackArrow from \"./back-arrow\";\nimport ForwardArrow from \"./forward-arrow\";\nimport PassButton from \"./pass-button\";\nimport SaveButton from \"./save-button\";\nimport StyleBGButton from \"./style-button\";\nimport playstone from \"../assets/playstone.mp3\";\nimport CurrentPlayer from \"./current-player\";\nimport TutorButton from \"./tutor-button\";\nimport Handicap from \"./handicap\";\nimport UserComponent from \"./current-user\";\n\n// utils imports\nimport newBoard from \"../utils/board-functions\";\nimport findOpponentNeighbors from \"../utils/find-neighbors\";\nimport isCaptured from \"../utils/is-captured\";\nimport { forwardInTime, backInTime } from \"../utils/time-travel\";\n\n// accepts array of opponent stones and scans the groups looking for liberties (false) or\n\nfunction GoBoard() {\n  const [history, setHistory] = useState(newBoard());\n  const [pastMoves, setPastMoves] = useState([newBoard()]);\n  const [currentMove, setCurrentMove] = useState(1);\n  const [whiteStones, setWhiteStones] = useState([]);\n  const [blackStones, setBlackStones] = useState([]);\n  const [passCount, setPassCount] = useState(1);\n  const [handicapLevel, setHandicapLevel] = useState(0);\n  const [blackCaptures, setBlackCaptures] = useState(0);\n  const [whiteCaptures, setWhiteCaptures] = useState(0);\n  let blackIsNext = currentMove % 2 !== 0;\n\n  // console.log(history)\n\n  function playStone(index) {\n    const audio = new Audio(playstone);\n    const updatedHistory = history.slice();\n    const intersectionName = updatedHistory[index].name;\n    setPassCount(0);\n\n    if (\n      whiteStones.includes(intersectionName) ||\n      blackStones.includes(intersectionName)\n    ) {\n      return;\n    }\n\n    audio.play();\n\n    if (blackIsNext) {\n      updatedHistory[index].stone = \"⚫\";\n      setBlackStones((prevBlackStones) => {\n        const updatedBlackStones = [...prevBlackStones, intersectionName];\n        return updatedBlackStones;\n      });\n    } else {\n      updatedHistory[index].stone = \"⚪\";\n      setWhiteStones((prevWhiteStones) => {\n        const updatedWhiteStones = [...prevWhiteStones, intersectionName];\n        return updatedWhiteStones;\n      });\n    }\n\n    // capture logic before updating state\n    // console.log('index ', index)\n    const opponentNeighbors = findOpponentNeighbors(\n      history,\n      index,\n      currentMove\n    );\n\n    // console.log('opponentNeighbors', opponentNeighbors);\n    // console.log('currentMove ', currentMove, 'opponentNeighbors ', opponentNeighbors)\n\n    // console.log(\"updatedHistory \", updatedHistory);\n\n    const capturedResult = isCaptured(\n      updatedHistory,\n      currentMove,\n      opponentNeighbors\n    );\n\n    // console.log(\"capturedResult\", capturedResult);\n    // console.log('history before for loop ', history);\n\n    if (capturedResult) {\n      for (const position of updatedHistory) {\n        if (capturedResult.includes(updatedHistory.indexOf(position))) {\n          position.stone = null;\n        }\n      }\n    }\n\n    // console.log('history after for loop ', history);\n    // need to update white & black stone arrays\n    //update state once board has accounted for captures\n    // console.log(\"capturedResult length: \", capturedResult.length);\n\n    if (blackIsNext && capturedResult) {\n      setBlackCaptures(blackCaptures + capturedResult.length);\n    } else if (!blackIsNext && capturedResult) {\n      setWhiteCaptures(whiteCaptures + capturedResult.length);\n    }\n\n    setCurrentMove(currentMove + 1);\n    setHistory(updatedHistory);\n\n    const pastMovesForUpdate = [...pastMoves];\n    pastMovesForUpdate.push(JSON.parse(JSON.stringify(history)));\n    setPastMoves(pastMovesForUpdate);\n  }\n\n  function handicapClick() {\n    const starPoints = [\n      \"Q16\",\n      \"D4\",\n      \"Q4\",\n      \"D16\",\n      \"Q10\",\n      \"D10\",\n      \"K16\",\n      \"K4\",\n      \"K10\",\n    ];\n\n    const starIndices = [72, 288, 300, 60, 186, 174, 66, 294, 180];\n    const startingHistory = history.slice(); // shallow copy\n\n    for (const intersection of startingHistory) {\n      if (\n        intersection.name === starPoints[handicapLevel] &&\n        handicapLevel < starPoints.length\n      ) {\n        intersection.stone = \"⚪\";\n        console.log(\"intersection \", intersection);\n      }\n    }\n\n    setHistory(startingHistory);\n    setCurrentMove(1);\n    setHandicapLevel(handicapLevel + 1);\n  }\n\n  return (\n    <>\n      <div className=\"bg-image\">\n        <div className=\"go-board\">\n          <BackArrow\n            onBackClick={() =>\n              backInTime(currentMove, pastMoves, setHistory, setCurrentMove)\n            }\n          />\n          <StyleBGButton />\n          <ForwardArrow\n            onForwardClick={() =>\n              forwardInTime(currentMove, pastMoves, setHistory, setCurrentMove)\n            }\n          />\n          <UserComponent\n            whiteCaptures={whiteCaptures}\n            blackCaptures={blackCaptures}\n            currentMove={currentMove}\n          />\n          {history.map((intersection, index) => (\n            <Intersection\n              key={index}\n              index={index}\n              name={intersection.name}\n              stone={intersection.stone}\n              onIntersectionClick={() => playStone(index)}\n            />\n          ))}\n          <TutorButton />\n          <Handicap onHandicapClick={() => handicapClick(handicapLevel, history)} />\n          <CurrentPlayer currentMove={currentMove} />\n          <PassButton\n            passCount={passCount}\n            setPassCount={setPassCount}\n            currentMove={currentMove}\n            setCurrentMove={setCurrentMove}\n          />\n          <SaveButton\n            pastMoves={pastMoves}\n            blackIsNext={blackIsNext}\n            currentMove={currentMove}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default GoBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}