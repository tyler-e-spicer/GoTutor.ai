{"ast":null,"code":"var _jsxFileName = \"/Users/tylerspicer/Desktop/Codesmith/solo-project/src/components/goboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Intersection from \"./intersection\";\nimport BackArrow from \"./back-arrow\";\nimport ForwardArrow from \"./forward-arrow\";\nimport PassButton from \"./pass-button\";\nimport SaveButton from \"./save-button\";\nimport StyleBGButton from \"./style-button\";\nimport playstone from \"../assets/playstone.mp3\";\nimport CurrentPlayer from \"./current-player\";\nimport TutorButton from \"./tutor-button\";\nimport Handicap from \"./handicap\";\nimport UserComponent from \"./current-user\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction newBoard() {\n  const horizontalAxis = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"];\n  const verticalAxis = [\"19\", \"18\", \"17\", \"16\", \"15\", \"14\", \"13\", \"12\", \"11\", \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"];\n  const board = [];\n  for (let i = 0; i < verticalAxis.length; i++) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      board.push({\n        name: `${horizontalAxis[j] + verticalAxis[i]}`,\n        stone: null\n      });\n    }\n  }\n  return board;\n}\nfunction findOpponentNeighbors(board, index, currentMove) {\n  const opponentNeighbors = [];\n  const opponent = currentMove % 2 === 0 ? \"⚫\" : \"⚪\";\n  if (board[index + 1] && board[index + 1].stone === opponent) {\n    opponentNeighbors.push(index + 1);\n  }\n  if (board[index - 1] && board[index - 1].stone === opponent) {\n    opponentNeighbors.push(index - 1);\n  }\n  if (board[index - 19] && board[index - 19].stone === opponent) {\n    opponentNeighbors.push(index - 19);\n  }\n  if (board[index + 19] && board[index + 19].stone === opponent) {\n    opponentNeighbors.push(index + 19);\n  }\n  return opponentNeighbors;\n}\n\n// accepts array of opponent stones and scans the groups looking for liberties (false) or\nfunction isCaptured(board, currentMove, opponentNeighbors) {\n  if (!opponentNeighbors) return;\n  const toInspect = [...opponentNeighbors];\n  // console.log('toInspect ', toInspect)\n  const checked = [];\n  const alliedStone = currentMove % 2 === 0 ? \"⚫\" : \"⚪\";\n  // console.log('alliedStone ', alliedStone)\n\n  while (toInspect.length) {\n    const currentIntersection = toInspect.pop();\n    console.log(\"currentIntersection \", currentIntersection);\n    // right\n    if (board[currentIntersection + 1] && board[currentIntersection + 1].stone === null) {\n      // console.log(board[currentIntersection + 1].stone)\n      console.log(\"intersection \", board[currentIntersection + 1]);\n      console.log(\"right\");\n      return false;\n    } else if (board[currentIntersection + 1] && board[currentIntersection + 1].stone === alliedStone) {\n      if (!checked.includes(currentIntersection + 1)) toInspect.push(currentIntersection + 1);\n    }\n    if (board[currentIntersection - 1] && board[currentIntersection - 1].stone === null) {\n      // console.log(board[currentIntersection - 1].stone)\n      console.log(\"intersection \", board[currentIntersection - 1]);\n      console.log(\"left\");\n      return false;\n    } else if (board[currentIntersection - 1] && board[currentIntersection - 1].stone === alliedStone) {\n      if (!checked.includes(currentIntersection - 1)) toInspect.push(currentIntersection - 1);\n    }\n\n    // console.log(board[currentIntersection + 3].stone)\n\n    if (board[currentIntersection + 19] && board[currentIntersection + 19].stone === null) {\n      // console.log(board[currentIntersection + 3].stone)\n      console.log(\"intersection \", board[currentIntersection + 19]);\n      console.log(\"bottom\");\n      return false;\n    } else if (board[currentIntersection + 19] && board[currentIntersection + 19].stone === alliedStone) {\n      if (!checked.includes(currentIntersection + 19)) toInspect.push(currentIntersection + 19);\n    }\n    if (board[currentIntersection - 19] && board[currentIntersection - 19].stone === null) {\n      console.log(\"intersection \", board[currentIntersection - 19]);\n      console.log(\"top\");\n      return false;\n    } else if (board[currentIntersection - 19] && board[currentIntersection - 19].stone === alliedStone) {\n      if (!checked.includes(currentIntersection - 19)) toInspect.push(currentIntersection - 19);\n    }\n    checked.push(currentIntersection);\n  }\n  return checked;\n}\nfunction GoBoard() {\n  _s();\n  const [history, setHistory] = useState(newBoard());\n  const [pastMoves, setPastMoves] = useState([newBoard()]);\n  const [currentMove, setCurrentMove] = useState(1);\n  const [whiteStones, setWhiteStones] = useState([]);\n  const [blackStones, setBlackStones] = useState([]);\n  const [passCount, setPassCount] = useState(1);\n  const [handicapLevel, setHandicapLevel] = useState(0);\n  const [blackCaptures, setBlackCaptures] = useState(0);\n  const [whiteCaptures, setWhiteCaptures] = useState(0);\n  let blackIsNext = currentMove % 2 !== 0;\n\n  // console.log(history)\n\n  function playStone(index) {\n    const audio = new Audio(playstone);\n    const updatedHistory = JSON.parse(JSON.stringify(history));\n    const intersectionName = updatedHistory[index].name;\n    setPassCount(0);\n    if (whiteStones.includes(intersectionName) || blackStones.includes(intersectionName)) {\n      return;\n    }\n    audio.play();\n    if (blackIsNext) {\n      updatedHistory[index].stone = \"⚫\";\n      setBlackStones(prevBlackStones => {\n        const updatedBlackStones = [...prevBlackStones, intersectionName];\n        return updatedBlackStones;\n      });\n    } else {\n      updatedHistory[index].stone = \"⚪\";\n      setWhiteStones(prevWhiteStones => {\n        const updatedWhiteStones = [...prevWhiteStones, intersectionName];\n        return updatedWhiteStones;\n      });\n    }\n\n    // capture logic before updating state\n    // console.log('index ', index)\n    const opponentNeighbors = findOpponentNeighbors(history, index, currentMove);\n    // console.log('opponentNeighbors', opponentNeighbors);\n\n    // console.log('currentMove ', currentMove, 'opponentNeighbors ', opponentNeighbors)\n\n    console.log(\"updatedHistory \", updatedHistory);\n    const capturedResult = isCaptured(updatedHistory, currentMove, opponentNeighbors);\n    console.log(\"capturedResult\", capturedResult);\n    // console.log('history before for loop ', history);\n\n    if (capturedResult) {\n      for (const position of updatedHistory) {\n        if (capturedResult.includes(updatedHistory.indexOf(position))) {\n          position.stone = null;\n        }\n      }\n    }\n    // console.log('history after for loop ', history);\n    // need to update white & black stone arrays\n    //update state once board has accounted for captures\n    console.log(\"capturedResult length: \", capturedResult.length);\n    if (blackIsNext && capturedResult) {\n      setBlackCaptures(blackCaptures + capturedResult.length);\n    } else if (!blackIsNext && capturedResult) {\n      setWhiteCaptures(whiteCaptures + capturedResult.length);\n    }\n    setCurrentMove(currentMove + 1);\n    setHistory(updatedHistory);\n    const pastMovesForUpdate = [...pastMoves];\n    pastMovesForUpdate.push(JSON.parse(JSON.stringify(history)));\n    setPastMoves(pastMovesForUpdate);\n  }\n  function backInTime(currentMove, pastMoves) {\n    console.log(\"invoking time travel\");\n    const pastMovesRef = [...pastMoves];\n    console.log(\"pastMovesRef: \", pastMovesRef);\n    const turnNum = currentMove;\n    console.log(\"turnNum \", turnNum);\n    if (!pastMovesRef || pastMovesRef.length === 0 || turnNum <= 0 || turnNum > pastMovesRef.length) {\n      return;\n    }\n    const newHistory = pastMovesRef[turnNum - 1];\n    console.log(\"newHistory \", newHistory);\n    setHistory(newHistory);\n    setCurrentMove(currentMove - 1);\n    console.log(\"history \", history);\n  }\n  function forwardInTime(currentMove, pastMoves) {\n    console.log(\"invoking time travel\");\n    const pastMovesRef = [...pastMoves];\n    console.log(\"pastMovesRef: \", pastMovesRef);\n    const turnNum = currentMove;\n    console.log(\"turnNum \", turnNum);\n    if (!pastMovesRef || pastMovesRef.length === 0 || turnNum < 0 || turnNum >= pastMovesRef.length - 1) {\n      return;\n    }\n    const newHistory = pastMovesRef[turnNum + 1];\n    console.log(\"newHistory \", newHistory);\n    setHistory(newHistory);\n    setCurrentMove(currentMove + 1);\n    console.log(\"history \", history);\n  }\n\n  // this function updates the boardstate when there is a stone in the place but not when it\n  function handicapClick() {\n    const starPoints = [\"Q16\", \"D4\", \"Q4\", \"D16\", \"Q10\", \"D10\", \"K16\", \"K4\", \"K10\"];\n    const starIndices = [72, 288, 300, 60, 186, 174, 66, 294, 180];\n    const startingHistory = JSON.parse(JSON.stringify(history));\n    for (const intersection of startingHistory) {\n      if (intersection.name === starPoints[handicapLevel] && handicapLevel < starPoints.length) {\n        intersection.stone = \"⚪\";\n        console.log(\"intersection \", intersection);\n      }\n    }\n    setHistory(startingHistory);\n    setCurrentMove(1);\n    setHandicapLevel(handicapLevel + 1);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-image\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"go-board\",\n        children: [/*#__PURE__*/_jsxDEV(BackArrow, {\n          onBackClick: () => backInTime(currentMove, pastMoves)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyleBGButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ForwardArrow, {\n          onForwardClick: () => forwardInTime(currentMove, pastMoves)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UserComponent, {\n          whiteCaptures: whiteCaptures,\n          blackCaptures: blackCaptures,\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), history.map((intersection, index) => /*#__PURE__*/_jsxDEV(Intersection, {\n          index: index,\n          name: intersection.name,\n          stone: intersection.stone,\n          onIntersectionClick: () => playStone(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(TutorButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Handicap, {\n          onHandicapClick: () => handicapClick()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CurrentPlayer, {\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PassButton, {\n          passCount: passCount,\n          setPassCount: setPassCount,\n          currentMove: currentMove,\n          setCurrentMove: setCurrentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SaveButton, {\n          pastMoves: pastMoves,\n          blackIsNext: blackIsNext,\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(GoBoard, \"qRcYRwCSYf0dRF+BLv28e0tl1Gc=\");\n_c = GoBoard;\nexport default GoBoard;\nvar _c;\n$RefreshReg$(_c, \"GoBoard\");","map":{"version":3,"names":["React","useState","Intersection","BackArrow","ForwardArrow","PassButton","SaveButton","StyleBGButton","playstone","CurrentPlayer","TutorButton","Handicap","UserComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","newBoard","horizontalAxis","verticalAxis","board","i","length","j","push","name","stone","findOpponentNeighbors","index","currentMove","opponentNeighbors","opponent","isCaptured","toInspect","checked","alliedStone","currentIntersection","pop","console","log","includes","GoBoard","_s","history","setHistory","pastMoves","setPastMoves","setCurrentMove","whiteStones","setWhiteStones","blackStones","setBlackStones","passCount","setPassCount","handicapLevel","setHandicapLevel","blackCaptures","setBlackCaptures","whiteCaptures","setWhiteCaptures","blackIsNext","playStone","audio","Audio","updatedHistory","JSON","parse","stringify","intersectionName","play","prevBlackStones","updatedBlackStones","prevWhiteStones","updatedWhiteStones","capturedResult","position","indexOf","pastMovesForUpdate","backInTime","pastMovesRef","turnNum","newHistory","forwardInTime","handicapClick","starPoints","starIndices","startingHistory","intersection","children","className","onBackClick","fileName","_jsxFileName","lineNumber","columnNumber","onForwardClick","map","onIntersectionClick","onHandicapClick","_c","$RefreshReg$"],"sources":["/Users/tylerspicer/Desktop/Codesmith/solo-project/src/components/goboard.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Intersection from \"./intersection\";\nimport BackArrow from \"./back-arrow\";\nimport ForwardArrow from \"./forward-arrow\";\nimport PassButton from \"./pass-button\";\nimport SaveButton from \"./save-button\";\nimport StyleBGButton from \"./style-button\";\nimport playstone from \"../assets/playstone.mp3\";\nimport CurrentPlayer from \"./current-player\";\nimport TutorButton from \"./tutor-button\";\nimport Handicap from \"./handicap\";\nimport UserComponent from \"./current-user\";\n\nfunction newBoard() {\n  const horizontalAxis = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n  ];\n  const verticalAxis = [\n    \"19\",\n    \"18\",\n    \"17\",\n    \"16\",\n    \"15\",\n    \"14\",\n    \"13\",\n    \"12\",\n    \"11\",\n    \"10\",\n    \"9\",\n    \"8\",\n    \"7\",\n    \"6\",\n    \"5\",\n    \"4\",\n    \"3\",\n    \"2\",\n    \"1\",\n  ];\n  const board = [];\n\n  for (let i = 0; i < verticalAxis.length; i++) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      board.push({\n        name: `${horizontalAxis[j] + verticalAxis[i]}`,\n        stone: null,\n      });\n    }\n  }\n\n  return board;\n}\n\nfunction findOpponentNeighbors(board, index, currentMove) {\n  const opponentNeighbors = [];\n  const opponent = currentMove % 2 === 0 ? \"⚫\" : \"⚪\";\n\n  if (board[index + 1] && board[index + 1].stone === opponent) {\n    opponentNeighbors.push(index + 1);\n  }\n\n  if (board[index - 1] && board[index - 1].stone === opponent) {\n    opponentNeighbors.push(index - 1);\n  }\n\n  if (board[index - 19] && board[index - 19].stone === opponent) {\n    opponentNeighbors.push(index - 19);\n  }\n\n  if (board[index + 19] && board[index + 19].stone === opponent) {\n    opponentNeighbors.push(index + 19);\n  }\n\n  return opponentNeighbors;\n}\n\n// accepts array of opponent stones and scans the groups looking for liberties (false) or\nfunction isCaptured(board, currentMove, opponentNeighbors) {\n  if (!opponentNeighbors) return;\n\n  const toInspect = [...opponentNeighbors];\n  // console.log('toInspect ', toInspect)\n  const checked = [];\n  const alliedStone = currentMove % 2 === 0 ? \"⚫\" : \"⚪\";\n  // console.log('alliedStone ', alliedStone)\n\n  while (toInspect.length) {\n    const currentIntersection = toInspect.pop();\n    console.log(\"currentIntersection \", currentIntersection);\n    // right\n    if (\n      board[currentIntersection + 1] &&\n      board[currentIntersection + 1].stone === null\n    ) {\n      // console.log(board[currentIntersection + 1].stone)\n      console.log(\"intersection \", board[currentIntersection + 1]);\n      console.log(\"right\");\n      return false;\n    } else if (\n      board[currentIntersection + 1] &&\n      board[currentIntersection + 1].stone === alliedStone\n    ) {\n      if (!checked.includes(currentIntersection + 1))\n        toInspect.push(currentIntersection + 1);\n    }\n\n    if (\n      board[currentIntersection - 1] &&\n      board[currentIntersection - 1].stone === null\n    ) {\n      // console.log(board[currentIntersection - 1].stone)\n      console.log(\"intersection \", board[currentIntersection - 1]);\n      console.log(\"left\");\n      return false;\n    } else if (\n      board[currentIntersection - 1] &&\n      board[currentIntersection - 1].stone === alliedStone\n    ) {\n      if (!checked.includes(currentIntersection - 1))\n        toInspect.push(currentIntersection - 1);\n    }\n\n    // console.log(board[currentIntersection + 3].stone)\n\n    if (\n      board[currentIntersection + 19] &&\n      board[currentIntersection + 19].stone === null\n    ) {\n      // console.log(board[currentIntersection + 3].stone)\n      console.log(\"intersection \", board[currentIntersection + 19]);\n      console.log(\"bottom\");\n      return false;\n    } else if (\n      board[currentIntersection + 19] &&\n      board[currentIntersection + 19].stone === alliedStone\n    ) {\n      if (!checked.includes(currentIntersection + 19))\n        toInspect.push(currentIntersection + 19);\n    }\n\n    if (\n      board[currentIntersection - 19] &&\n      board[currentIntersection - 19].stone === null\n    ) {\n      console.log(\"intersection \", board[currentIntersection - 19]);\n      console.log(\"top\");\n      return false;\n    } else if (\n      board[currentIntersection - 19] &&\n      board[currentIntersection - 19].stone === alliedStone\n    ) {\n      if (!checked.includes(currentIntersection - 19))\n        toInspect.push(currentIntersection - 19);\n    }\n\n    checked.push(currentIntersection);\n  }\n  return checked;\n}\n\nfunction GoBoard() {\n  const [history, setHistory] = useState(newBoard());\n  const [pastMoves, setPastMoves] = useState([newBoard()]);\n  const [currentMove, setCurrentMove] = useState(1);\n  const [whiteStones, setWhiteStones] = useState([]);\n  const [blackStones, setBlackStones] = useState([]);\n  const [passCount, setPassCount] = useState(1);\n  const [handicapLevel, setHandicapLevel] = useState(0);\n  const [blackCaptures, setBlackCaptures] = useState(0);\n  const [whiteCaptures, setWhiteCaptures] = useState(0);\n  let blackIsNext = currentMove % 2 !== 0;\n\n  // console.log(history)\n\n  function playStone(index) {\n    const audio = new Audio(playstone);\n    const updatedHistory = JSON.parse(JSON.stringify(history));\n    const intersectionName = updatedHistory[index].name;\n    setPassCount(0);\n\n    if (\n      whiteStones.includes(intersectionName) ||\n      blackStones.includes(intersectionName)\n    ) {\n      return;\n    }\n\n    audio.play();\n\n    if (blackIsNext) {\n      updatedHistory[index].stone = \"⚫\";\n      setBlackStones((prevBlackStones) => {\n        const updatedBlackStones = [...prevBlackStones, intersectionName];\n        return updatedBlackStones;\n      });\n    } else {\n      updatedHistory[index].stone = \"⚪\";\n      setWhiteStones((prevWhiteStones) => {\n        const updatedWhiteStones = [...prevWhiteStones, intersectionName];\n        return updatedWhiteStones;\n      });\n    }\n\n    // capture logic before updating state\n    // console.log('index ', index)\n    const opponentNeighbors = findOpponentNeighbors(\n      history,\n      index,\n      currentMove\n    );\n    // console.log('opponentNeighbors', opponentNeighbors);\n\n    // console.log('currentMove ', currentMove, 'opponentNeighbors ', opponentNeighbors)\n\n    console.log(\"updatedHistory \", updatedHistory);\n    const capturedResult = isCaptured(\n      updatedHistory,\n      currentMove,\n      opponentNeighbors\n    );\n    console.log(\"capturedResult\", capturedResult);\n    // console.log('history before for loop ', history);\n\n    if (capturedResult) {\n      for (const position of updatedHistory) {\n        if (capturedResult.includes(updatedHistory.indexOf(position))) {\n          position.stone = null;\n        }\n      }\n    }\n    // console.log('history after for loop ', history);\n    // need to update white & black stone arrays\n    //update state once board has accounted for captures\n    console.log(\"capturedResult length: \", capturedResult.length);\n\n    if (blackIsNext && capturedResult) {\n      setBlackCaptures(blackCaptures + capturedResult.length);\n    } else if (!blackIsNext && capturedResult) {\n      setWhiteCaptures(whiteCaptures + capturedResult.length);\n    }\n\n    setCurrentMove(currentMove + 1);\n    setHistory(updatedHistory);\n\n    const pastMovesForUpdate = [...pastMoves];\n    pastMovesForUpdate.push(JSON.parse(JSON.stringify(history)));\n    setPastMoves(pastMovesForUpdate);\n  }\n\n  function backInTime(currentMove, pastMoves) {\n    console.log(\"invoking time travel\");\n    const pastMovesRef = [...pastMoves];\n    console.log(\"pastMovesRef: \", pastMovesRef);\n    const turnNum = currentMove;\n    console.log(\"turnNum \", turnNum);\n\n    if (\n      !pastMovesRef ||\n      pastMovesRef.length === 0 ||\n      turnNum <= 0 ||\n      turnNum > pastMovesRef.length\n    ) {\n      return;\n    }\n\n    const newHistory = pastMovesRef[turnNum - 1];\n    console.log(\"newHistory \", newHistory);\n    setHistory(newHistory);\n    setCurrentMove(currentMove - 1);\n    console.log(\"history \", history);\n  }\n\n  function forwardInTime(currentMove, pastMoves) {\n    console.log(\"invoking time travel\");\n    const pastMovesRef = [...pastMoves];\n    console.log(\"pastMovesRef: \", pastMovesRef);\n    const turnNum = currentMove;\n    console.log(\"turnNum \", turnNum);\n\n    if (\n      !pastMovesRef ||\n      pastMovesRef.length === 0 ||\n      turnNum < 0 ||\n      turnNum >= pastMovesRef.length - 1\n    ) {\n      return;\n    }\n\n    const newHistory = pastMovesRef[turnNum + 1];\n    console.log(\"newHistory \", newHistory);\n    setHistory(newHistory);\n    setCurrentMove(currentMove + 1);\n    console.log(\"history \", history);\n  }\n\n  // this function updates the boardstate when there is a stone in the place but not when it\n  function handicapClick() {\n    const starPoints = [\n      \"Q16\",\n      \"D4\",\n      \"Q4\",\n      \"D16\",\n      \"Q10\",\n      \"D10\",\n      \"K16\",\n      \"K4\",\n      \"K10\",\n    ];\n    const starIndices = [72, 288, 300, 60, 186, 174, 66, 294, 180];\n    const startingHistory = JSON.parse(JSON.stringify(history));\n\n    for (const intersection of startingHistory) {\n      if (\n        intersection.name === starPoints[handicapLevel] &&\n        handicapLevel < starPoints.length\n      ) {\n        intersection.stone = \"⚪\";\n        console.log(\"intersection \", intersection);\n      }\n    }\n\n    setHistory(startingHistory);\n\n    setCurrentMove(1);\n\n    setHandicapLevel(handicapLevel + 1);\n  }\n\n  return (\n    <>\n      <div className=\"bg-image\">\n        <div className=\"go-board\">\n          <BackArrow onBackClick={() => backInTime(currentMove, pastMoves)} />\n          <StyleBGButton />\n          <ForwardArrow\n            onForwardClick={() => forwardInTime(currentMove, pastMoves)}\n          />\n          <UserComponent\n            whiteCaptures={whiteCaptures}\n            blackCaptures={blackCaptures}\n            currentMove={currentMove}\n          />\n          {history.map((intersection, index) => (\n            <Intersection\n              key={index}\n              index={index}\n              name={intersection.name}\n              stone={intersection.stone}\n              onIntersectionClick={() => playStone(index)}\n            />\n          ))}\n          <TutorButton />\n          <Handicap onHandicapClick={() => handicapClick()} />\n          <CurrentPlayer currentMove={currentMove} />\n          <PassButton\n            passCount={passCount}\n            setPassCount={setPassCount}\n            currentMove={currentMove}\n            setCurrentMove={setCurrentMove}\n          />\n          <SaveButton\n            pastMoves={pastMoves}\n            blackIsNext={blackIsNext}\n            currentMove={currentMove}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default GoBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}