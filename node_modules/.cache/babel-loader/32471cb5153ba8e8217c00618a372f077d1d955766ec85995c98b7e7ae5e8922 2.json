{"ast":null,"code":"var _jsxFileName = \"/Users/tylerspicer/Desktop/Codesmith/solo-project/src/components/goboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Intersection from './intersection';\nimport BackArrow from './back-arrow';\nimport ForwardArrow from './forward-arrow';\nimport PassButton from './pass-button';\nimport SaveButton from './save-button';\nimport StyleBGButton from './style-button';\nimport playstone from '../assets/playstone.mp3';\nimport CurrentPlayer from './current-player';\nimport TutorButton from './tutor-button';\nimport Handicap from './handicap';\nimport UserComponent from './current-user';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction newBoard() {\n  const horizontalAxis = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'];\n  const verticalAxis = ['19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', '3', '2', '1'];\n  const board = [];\n  for (let i = 0; i < verticalAxis.length; i++) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      board.push({\n        name: `${horizontalAxis[j] + verticalAxis[i]}`,\n        stone: null\n      });\n    }\n  }\n  return board;\n}\nfunction findOpponentNeighbors(board, index, currentMove) {\n  const opponentNeighbors = [];\n  const opponent = currentMove % 2 === 0 ? '⚫' : '⚪';\n  if (board[index + 1] && board[index + 1].stone === opponent) {\n    opponentNeighbors.push(index + 1);\n  }\n  if (board[index - 1] && board[index - 1].stone === opponent) {\n    opponentNeighbors.push(index - 1);\n  }\n  if (board[index - 19] && board[index - 19].stone === opponent) {\n    opponentNeighbors.push(index - 19);\n  }\n  if (board[index + 19] && board[index + 19].stone === opponent) {\n    opponentNeighbors.push(index + 19);\n  }\n  return opponentNeighbors;\n}\n\n// accepts array of opponent stones and scans the groups looking for liberties (false) or \nfunction isCaptured(board, currentMove, opponentNeighbors) {\n  if (!opponentNeighbors) return;\n  const toInspect = [...opponentNeighbors];\n  // console.log('toInspect ', toInspect)\n  const checked = [];\n  const alliedStone = currentMove % 2 === 0 ? '⚫' : '⚪';\n  // console.log('alliedStone ', alliedStone)\n\n  while (toInspect.length) {\n    const currentIntersection = toInspect.pop();\n    console.log('currentIntersection ', currentIntersection);\n    // right\n    if (board[currentIntersection + 1] && board[currentIntersection + 1].stone === null) {\n      // console.log(board[currentIntersection + 1].stone)\n      console.log('intersection ', board[currentIntersection + 1]);\n      console.log('right');\n      return false;\n    } else if (board[currentIntersection + 1] && board[currentIntersection + 1].stone === alliedStone) {\n      if (!checked.includes(currentIntersection + 1)) toInspect.push(currentIntersection + 1);\n    }\n    if (board[currentIntersection - 1] && board[currentIntersection - 1].stone === null) {\n      // console.log(board[currentIntersection - 1].stone)\n      console.log('intersection ', board[currentIntersection - 1]);\n      console.log('left');\n      return false;\n    } else if (board[currentIntersection - 1] && board[currentIntersection - 1].stone === alliedStone) {\n      if (!checked.includes(currentIntersection - 1)) toInspect.push(currentIntersection - 1);\n    }\n\n    // console.log(board[currentIntersection + 3].stone)\n\n    if (board[currentIntersection + 19] && board[currentIntersection + 19].stone === null) {\n      // console.log(board[currentIntersection + 3].stone)\n      console.log('intersection ', board[currentIntersection + 19]);\n      console.log('bottom');\n      return false;\n    } else if (board[currentIntersection + 19] && board[currentIntersection + 19].stone === alliedStone) {\n      if (!checked.includes(currentIntersection + 19)) toInspect.push(currentIntersection + 19);\n    }\n    if (board[currentIntersection - 19] && board[currentIntersection - 19].stone === null) {\n      console.log('intersection ', board[currentIntersection - 19]);\n      console.log('top');\n      return false;\n    } else if (board[currentIntersection - 19] && board[currentIntersection - 19].stone === alliedStone) {\n      if (!checked.includes(currentIntersection - 19)) toInspect.push(currentIntersection - 19);\n    }\n    checked.push(currentIntersection);\n  }\n  return checked;\n}\nfunction GoBoard() {\n  _s();\n  const [history, setHistory] = useState(newBoard());\n  const [pastMoves, setPastMoves] = useState([newBoard()]);\n  const [currentMove, setCurrentMove] = useState(1);\n  const [whiteStones, setWhiteStones] = useState([]);\n  const [blackStones, setBlackStones] = useState([]);\n  const [passCount, setPassCount] = useState(1);\n  const [handicapLevel, setHandicapLevel] = useState(0);\n  const [blackCaptures, setBlackCaptures] = useState(0);\n  const [whiteCaptures, setWhiteCaptures] = useState(0);\n  let blackIsNext = currentMove % 2 !== 0;\n\n  // console.log(history)\n\n  function playStone(index) {\n    const audio = new Audio(playstone);\n    const updatedHistory = JSON.parse(JSON.stringify(history));\n    const intersectionName = updatedHistory[index].name;\n    setPassCount(0);\n    if (whiteStones.includes(intersectionName) || blackStones.includes(intersectionName)) {\n      return;\n    }\n    audio.play();\n    if (blackIsNext) {\n      updatedHistory[index].stone = '⚫';\n      setBlackStones(prevBlackStones => {\n        const updatedBlackStones = [...prevBlackStones, intersectionName];\n        return updatedBlackStones;\n      });\n    } else {\n      updatedHistory[index].stone = '⚪';\n      setWhiteStones(prevWhiteStones => {\n        const updatedWhiteStones = [...prevWhiteStones, intersectionName];\n        return updatedWhiteStones;\n      });\n    }\n\n    // capture logic before updating state\n    // console.log('index ', index)\n    const opponentNeighbors = findOpponentNeighbors(history, index, currentMove);\n    // console.log('opponentNeighbors', opponentNeighbors);\n\n    // console.log('currentMove ', currentMove, 'opponentNeighbors ', opponentNeighbors)\n\n    console.log('updatedHistory ', updatedHistory);\n    const capturedResult = isCaptured(updatedHistory, currentMove, opponentNeighbors);\n    console.log('capturedResult', capturedResult);\n    // console.log('history before for loop ', history);\n\n    if (capturedResult) {\n      for (const position of updatedHistory) {\n        if (capturedResult.includes(updatedHistory.indexOf(position))) {\n          position.stone = null;\n        }\n      }\n    }\n    // console.log('history after for loop ', history);\n    // need to update white & black stone arrays\n    //update state once board has accounted for captures\n    console.log('capturedResult length: ', capturedResult.length);\n    if (blackIsNext && capturedResult) {\n      setBlackCaptures(blackCaptures + capturedResult.length);\n    } else if (!blackIsNext && capturedResult) {\n      setWhiteCaptures(whiteCaptures + capturedResult.length);\n    }\n    setCurrentMove(currentMove + 1);\n    setHistory(updatedHistory);\n    const pastMovesForUpdate = [...pastMoves];\n    pastMovesForUpdate.push(JSON.parse(JSON.stringify(history)));\n    setPastMoves(pastMovesForUpdate);\n  }\n  function backInTime(currentMove, pastMoves) {\n    console.log('invoking time travel');\n    const pastMovesRef = [...pastMoves];\n    console.log('pastMovesRef: ', pastMovesRef);\n    const turnNum = currentMove;\n    console.log('turnNum ', turnNum);\n    if (!pastMovesRef || pastMovesRef.length === 0 || turnNum <= 0 || turnNum > pastMovesRef.length) {\n      return;\n    }\n    const newHistory = pastMovesRef[turnNum - 1];\n    console.log('newHistory ', newHistory);\n    setHistory(newHistory);\n    setCurrentMove(currentMove - 1);\n    console.log('history ', history);\n  }\n  function forwardInTime(currentMove, pastMoves) {\n    console.log('invoking time travel');\n    const pastMovesRef = [...pastMoves];\n    console.log('pastMovesRef: ', pastMovesRef);\n    const turnNum = currentMove;\n    console.log('turnNum ', turnNum);\n    if (!pastMovesRef || pastMovesRef.length === 0 || turnNum < 0 || turnNum >= pastMovesRef.length - 1) {\n      return;\n    }\n    const newHistory = pastMovesRef[turnNum + 1];\n    console.log('newHistory ', newHistory);\n    setHistory(newHistory);\n    setCurrentMove(currentMove + 1);\n    console.log('history ', history);\n  }\n\n  // this function updates the boardstate when there is a stone in the place but not when it \n  function handicapClick() {\n    const starPoints = ['Q16', 'D4', 'Q4', 'D16', 'Q10', 'D10', 'K16', 'K4', 'K10'];\n    const starIndices = [72, 288, 300, 60, 186, 174, 66, 294, 180];\n    const startingHistory = JSON.parse(JSON.stringify(history));\n    for (const intersection of startingHistory) {\n      if (intersection.name === starPoints[handicapLevel] && handicapLevel < starPoints.length) {\n        intersection.stone = '⚪';\n        console.log('intersection ', intersection);\n      }\n    }\n    setHistory(startingHistory);\n    setCurrentMove(1);\n    setHandicapLevel(handicapLevel + 1);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"go-board\",\n      children: [/*#__PURE__*/_jsxDEV(BackArrow, {\n        onBackClick: () => backInTime(currentMove, pastMoves)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyleBGButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForwardArrow, {\n        onForwardClick: () => forwardInTime(currentMove, pastMoves)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserComponent, {\n        whiteCaptures: whiteCaptures,\n        blackCaptures: blackCaptures,\n        currentMove: currentMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), history.map((intersection, index) => /*#__PURE__*/_jsxDEV(Intersection, {\n        index: index,\n        name: intersection.name,\n        stone: intersection.stone,\n        onIntersectionClick: () => playStone(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(TutorButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Handicap, {\n        onHandicapClick: () => handicapClick()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CurrentPlayer, {\n        currentMove: currentMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PassButton, {\n        passCount: passCount,\n        setPassCount: setPassCount,\n        currentMove: currentMove,\n        setCurrentMove: setCurrentMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SaveButton, {\n        pastMoves: pastMoves,\n        blackIsNext: blackIsNext,\n        currentMove: currentMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(GoBoard, \"qRcYRwCSYf0dRF+BLv28e0tl1Gc=\");\n_c = GoBoard;\nexport default GoBoard;\nvar _c;\n$RefreshReg$(_c, \"GoBoard\");","map":{"version":3,"names":["React","useState","Intersection","BackArrow","ForwardArrow","PassButton","SaveButton","StyleBGButton","playstone","CurrentPlayer","TutorButton","Handicap","UserComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","newBoard","horizontalAxis","verticalAxis","board","i","length","j","push","name","stone","findOpponentNeighbors","index","currentMove","opponentNeighbors","opponent","isCaptured","toInspect","checked","alliedStone","currentIntersection","pop","console","log","includes","GoBoard","_s","history","setHistory","pastMoves","setPastMoves","setCurrentMove","whiteStones","setWhiteStones","blackStones","setBlackStones","passCount","setPassCount","handicapLevel","setHandicapLevel","blackCaptures","setBlackCaptures","whiteCaptures","setWhiteCaptures","blackIsNext","playStone","audio","Audio","updatedHistory","JSON","parse","stringify","intersectionName","play","prevBlackStones","updatedBlackStones","prevWhiteStones","updatedWhiteStones","capturedResult","position","indexOf","pastMovesForUpdate","backInTime","pastMovesRef","turnNum","newHistory","forwardInTime","handicapClick","starPoints","starIndices","startingHistory","intersection","children","className","onBackClick","fileName","_jsxFileName","lineNumber","columnNumber","onForwardClick","map","onIntersectionClick","onHandicapClick","_c","$RefreshReg$"],"sources":["/Users/tylerspicer/Desktop/Codesmith/solo-project/src/components/goboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Intersection from './intersection';\nimport BackArrow from './back-arrow';\nimport ForwardArrow from './forward-arrow';\nimport PassButton from './pass-button';\nimport SaveButton from './save-button';\nimport StyleBGButton from './style-button';\nimport playstone from '../assets/playstone.mp3';\nimport CurrentPlayer from './current-player';\nimport TutorButton from './tutor-button';\nimport Handicap from './handicap';\nimport UserComponent from './current-user';\n\nfunction newBoard() {\n    const horizontalAxis = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'];\n    const verticalAxis = ['19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', '3', '2', '1'];\n    const board = [];\n    \n    for (let i = 0; i < verticalAxis.length; i++) {\n      for (let j = 0; j < horizontalAxis.length; j++) {\n        board.push({\n            name: `${horizontalAxis[j] + verticalAxis[i]}`,\n            stone: null\n        });\n      }\n    }\n    \n    return board;\n  }\n\n  function findOpponentNeighbors(board, index, currentMove) {\n    const opponentNeighbors = [];\n    const opponent = currentMove % 2 === 0 ? '⚫' : '⚪';\n  \n    if (board[index + 1] && board[index + 1].stone === opponent) {\n      opponentNeighbors.push(index + 1);\n    }\n  \n    if (board[index - 1] && board[index - 1].stone === opponent) {\n      opponentNeighbors.push(index - 1);\n    }\n  \n    if (board[index - 19] && board[index - 19].stone === opponent) {\n      opponentNeighbors.push(index - 19);\n    }\n  \n    if (board[index + 19] && board[index + 19].stone === opponent) {\n      opponentNeighbors.push(index + 19);\n    }\n  \n    return opponentNeighbors;\n  }\n  \n  // accepts array of opponent stones and scans the groups looking for liberties (false) or \n  function isCaptured(board, currentMove, opponentNeighbors) {\n    \n    if (!opponentNeighbors) return;\n    \n    const toInspect = [... opponentNeighbors];\n    // console.log('toInspect ', toInspect)\n    const checked = []\n    const alliedStone = currentMove % 2 === 0 ? '⚫' : '⚪';\n    // console.log('alliedStone ', alliedStone)\n  \n    while (toInspect.length) {\n      const currentIntersection = toInspect.pop();\n      console.log('currentIntersection ', currentIntersection)\n      // right\n      if (board[currentIntersection + 1] && board[currentIntersection + 1].stone === null) {\n        // console.log(board[currentIntersection + 1].stone)\n        console.log('intersection ', board[currentIntersection + 1])\n        console.log('right')\n        return false; \n      } else if (board[currentIntersection + 1] && board[currentIntersection + 1].stone === alliedStone) {\n        if (!checked.includes(currentIntersection + 1)) toInspect.push(currentIntersection + 1);\n      }\n  \n      if (board[currentIntersection - 1] && board[currentIntersection - 1].stone === null) {\n        // console.log(board[currentIntersection - 1].stone)\n        console.log('intersection ', board[currentIntersection - 1])\n        console.log('left')\n        return false; \n      } else if (board[currentIntersection - 1] && board[currentIntersection - 1].stone === alliedStone) {\n        if (!checked.includes(currentIntersection - 1)) toInspect.push(currentIntersection - 1);\n      }\n  \n      // console.log(board[currentIntersection + 3].stone)\n  \n      if (board[currentIntersection + 19] && board[currentIntersection + 19].stone === null) {\n        // console.log(board[currentIntersection + 3].stone)\n        console.log('intersection ', board[currentIntersection + 19])\n        console.log('bottom')\n        return false; \n      } else if (board[currentIntersection + 19] && board[currentIntersection + 19].stone === alliedStone) {\n        if (!checked.includes(currentIntersection + 19)) toInspect.push(currentIntersection + 19);\n      }\n  \n      if (board[currentIntersection - 19] && board[currentIntersection - 19].stone === null) {\n        console.log('intersection ', board[currentIntersection - 19])\n        console.log('top')\n        return false; \n      } else if (board[currentIntersection - 19] && board[currentIntersection - 19].stone === alliedStone) {\n        if (!checked.includes(currentIntersection - 19)) toInspect.push(currentIntersection - 19);\n      }\n  \n      checked.push(currentIntersection);\n    }\n      return checked;\n  }\n\n  function GoBoard() {\n    \n    const [history, setHistory] = useState(newBoard());\n    const [pastMoves, setPastMoves] = useState([newBoard()])\n    const [currentMove, setCurrentMove] = useState(1);\n    const [whiteStones, setWhiteStones] = useState([]);\n    const [blackStones, setBlackStones] = useState([]);\n    const [passCount, setPassCount] = useState(1)\n    const [handicapLevel, setHandicapLevel] = useState(0);\n    const [blackCaptures, setBlackCaptures] = useState(0);\n    const [whiteCaptures, setWhiteCaptures] = useState(0);\n    let blackIsNext = currentMove % 2 !== 0;\n\n    // console.log(history)\n\n    function playStone(index) {\n        const audio = new Audio(playstone);\n        const updatedHistory = JSON.parse(JSON.stringify(history));\n        const intersectionName = updatedHistory[index].name;\n        setPassCount(0);\n    \n        if (whiteStones.includes(intersectionName) || blackStones.includes(intersectionName)) {\n          return; \n        }\n\n        audio.play();\n    \n        if (blackIsNext) {\n          updatedHistory[index].stone = '⚫';\n          setBlackStones((prevBlackStones) => {\n            const updatedBlackStones = [...prevBlackStones, intersectionName];\n            return updatedBlackStones;\n          });\n          \n        } else {\n          updatedHistory[index].stone = '⚪';\n          setWhiteStones((prevWhiteStones) => {\n            const updatedWhiteStones = [...prevWhiteStones, intersectionName];\n            return updatedWhiteStones;\n          });\n        }\n\n        // capture logic before updating state\n        // console.log('index ', index)\n        const opponentNeighbors = findOpponentNeighbors(history, index, currentMove);\n        // console.log('opponentNeighbors', opponentNeighbors);\n        \n        // console.log('currentMove ', currentMove, 'opponentNeighbors ', opponentNeighbors)\n        \n        console.log('updatedHistory ', updatedHistory)\n        const capturedResult = isCaptured(updatedHistory, currentMove, opponentNeighbors);\n        console.log('capturedResult', capturedResult);\n        // console.log('history before for loop ', history);\n\n        if (capturedResult) {\n          for (const position of updatedHistory) {\n            if (capturedResult.includes(updatedHistory.indexOf(position))) {\n              position.stone = null; \n            }\n          }\n        }\n        // console.log('history after for loop ', history);\n        // need to update white & black stone arrays\n        //update state once board has accounted for captures\n        console.log('capturedResult length: ', capturedResult.length)\n\n        if (blackIsNext && capturedResult) {\n          setBlackCaptures(blackCaptures + capturedResult.length)\n        } else if (!blackIsNext && capturedResult) {\n          setWhiteCaptures(whiteCaptures + capturedResult.length)\n        }\n        \n        setCurrentMove(currentMove+1);\n        setHistory(updatedHistory);\n\n        const pastMovesForUpdate = [...pastMoves];\n        pastMovesForUpdate.push(JSON.parse(JSON.stringify(history)));\n        setPastMoves(pastMovesForUpdate);\n        \n    }\n\n    function backInTime(currentMove, pastMoves) {\n        console.log('invoking time travel');\n        const pastMovesRef = [...pastMoves];\n        console.log('pastMovesRef: ', pastMovesRef)\n        const turnNum = currentMove;\n        console.log('turnNum ', turnNum)\n\n        if (!pastMovesRef || pastMovesRef.length === 0 || turnNum <= 0 || turnNum > pastMovesRef.length) {\n            return;\n          }\n\n        const newHistory = pastMovesRef[turnNum-1];\n        console.log('newHistory ', newHistory);\n        setHistory(newHistory);\n        setCurrentMove(currentMove-1);\n        console.log('history ', history);\n    }\n\n    function forwardInTime(currentMove, pastMoves) {\n        console.log('invoking time travel');\n        const pastMovesRef = [...pastMoves];\n        console.log('pastMovesRef: ', pastMovesRef)\n        const turnNum = currentMove;\n        console.log('turnNum ', turnNum)\n        \n        if (!pastMovesRef || pastMovesRef.length === 0 || turnNum < 0 || turnNum >= pastMovesRef.length - 1) {\n            return;\n          }\n        \n        const newHistory = pastMovesRef[turnNum+1];\n        console.log('newHistory ', newHistory);\n        setHistory(newHistory);\n        setCurrentMove(currentMove+1);\n        console.log('history ', history);\n    }\n\n    // this function updates the boardstate when there is a stone in the place but not when it \n    function handicapClick () {\n      const starPoints = ['Q16', 'D4', 'Q4', 'D16', 'Q10', 'D10', 'K16', 'K4', 'K10'];\n      const starIndices = [72, 288, 300, 60, 186, 174, 66, 294, 180]\n      const startingHistory = JSON.parse(JSON.stringify(history));\n\n      for (const intersection of startingHistory) {\n        if (intersection.name === starPoints[handicapLevel] && handicapLevel < starPoints.length) {\n          intersection.stone = '⚪';\n          console.log('intersection ', intersection);\n        }\n      }\n\n      setHistory(startingHistory);\n      \n      setCurrentMove(1);\n\n      setHandicapLevel(handicapLevel + 1);\n\n    }\n\n    \n    return (\n      <>\n      <div className='go-board'>\n        <BackArrow onBackClick={() => backInTime(currentMove, pastMoves)} />\n        <StyleBGButton />\n        <ForwardArrow onForwardClick={() => forwardInTime (currentMove, pastMoves)} />\n        <UserComponent whiteCaptures={whiteCaptures} blackCaptures={blackCaptures} currentMove={currentMove} />\n        {history.map((intersection, index) => (\n          <Intersection\n            key={index}\n            index={index}\n            name={intersection.name}\n            stone={intersection.stone}\n            onIntersectionClick={() => playStone(index)}\n          />\n        ))}\n        <TutorButton />\n        <Handicap onHandicapClick={() => handicapClick()} />\n        <CurrentPlayer currentMove={currentMove} />\n        <PassButton passCount={passCount} setPassCount={setPassCount} currentMove={currentMove} setCurrentMove={setCurrentMove} />\n        <SaveButton pastMoves={pastMoves} blackIsNext={blackIsNext} currentMove={currentMove} />\n      </div>\n      </>\n    )}\n\n    export default GoBoard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}