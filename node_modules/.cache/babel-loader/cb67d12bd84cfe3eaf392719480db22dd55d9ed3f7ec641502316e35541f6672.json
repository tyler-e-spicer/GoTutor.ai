{"ast":null,"code":"var _jsxFileName = \"/Users/tylerspicer/Desktop/Codesmith/solo-project/src/components/goboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// component imports\nimport Intersection from \"./intersection\";\nimport BackArrow from \"./back-arrow\";\nimport ForwardArrow from \"./forward-arrow\";\nimport PassButton from \"./pass-button\";\nimport SaveButton from \"./save-button\";\nimport StyleBGButton from \"./style-button\";\nimport playstone from \"../assets/playstone.mp3\";\nimport CurrentPlayer from \"./current-player\";\nimport TutorButton from \"./tutor-button\";\nimport Handicap from \"./handicap\";\nimport UserComponent from \"./current-user\";\n\n// utils imports\nimport newBoard from \"../utils/board-functions\";\nimport findOpponentNeighbors from \"../utils/find-neighbors\";\nimport isCaptured from \"../utils/is-captured\";\nimport { forwardInTime, backInTime } from \"../utils/time-travel\";\nimport handicapClick from \"../utils/handicap\";\n\n// accepts array of opponent stones and scans the groups looking for liberties (false) or\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GoBoard() {\n  _s();\n  const [history, setHistory] = useState(newBoard());\n  const [pastMoves, setPastMoves] = useState([newBoard()]);\n  const [currentMove, setCurrentMove] = useState(1);\n  const [whiteStones, setWhiteStones] = useState([]);\n  const [blackStones, setBlackStones] = useState([]);\n  const [passCount, setPassCount] = useState(1);\n  const [handicapLevel, setHandicapLevel] = useState(0);\n  const [blackCaptures, setBlackCaptures] = useState(0);\n  const [whiteCaptures, setWhiteCaptures] = useState(0);\n  let blackIsNext = currentMove % 2 !== 0;\n\n  // console.log(history)\n\n  function playStone(index) {\n    const audio = new Audio(playstone);\n    const updatedHistory = JSON.parse(JSON.stringify(history));\n    const intersectionName = updatedHistory[index].name;\n    setPassCount(0);\n    if (whiteStones.includes(intersectionName) || blackStones.includes(intersectionName)) {\n      return;\n    }\n    audio.play();\n    if (blackIsNext) {\n      updatedHistory[index].stone = \"⚫\";\n      setBlackStones(prevBlackStones => {\n        const updatedBlackStones = [...prevBlackStones, intersectionName];\n        return updatedBlackStones;\n      });\n    } else {\n      updatedHistory[index].stone = \"⚪\";\n      setWhiteStones(prevWhiteStones => {\n        const updatedWhiteStones = [...prevWhiteStones, intersectionName];\n        return updatedWhiteStones;\n      });\n    }\n\n    // capture logic before updating state\n    // console.log('index ', index)\n    const opponentNeighbors = findOpponentNeighbors(history, index, currentMove);\n\n    // console.log('opponentNeighbors', opponentNeighbors);\n    // console.log('currentMove ', currentMove, 'opponentNeighbors ', opponentNeighbors)\n\n    // console.log(\"updatedHistory \", updatedHistory);\n\n    const capturedResult = isCaptured(updatedHistory, currentMove, opponentNeighbors);\n\n    // console.log(\"capturedResult\", capturedResult);\n    // console.log('history before for loop ', history);\n\n    if (capturedResult) {\n      for (const position of updatedHistory) {\n        if (capturedResult.includes(updatedHistory.indexOf(position))) {\n          position.stone = null;\n        }\n      }\n    }\n\n    // console.log('history after for loop ', history);\n    // need to update white & black stone arrays\n    //update state once board has accounted for captures\n    // console.log(\"capturedResult length: \", capturedResult.length);\n\n    if (blackIsNext && capturedResult) {\n      setBlackCaptures(blackCaptures + capturedResult.length);\n    } else if (!blackIsNext && capturedResult) {\n      setWhiteCaptures(whiteCaptures + capturedResult.length);\n    }\n    setCurrentMove(currentMove + 1);\n    setHistory(updatedHistory);\n    const pastMovesForUpdate = [...pastMoves];\n    pastMovesForUpdate.push(JSON.parse(JSON.stringify(history)));\n    setPastMoves(pastMovesForUpdate);\n  }\n\n  // this function updates the boardstate when there is a stone in the place but not when it\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-image\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"go-board\",\n        children: [/*#__PURE__*/_jsxDEV(BackArrow, {\n          onBackClick: () => backInTime(currentMove, pastMoves)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyleBGButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ForwardArrow, {\n          onForwardClick: () => forwardInTime(currentMove, pastMoves)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UserComponent, {\n          whiteCaptures: whiteCaptures,\n          blackCaptures: blackCaptures,\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), history.map((intersection, index) => /*#__PURE__*/_jsxDEV(Intersection, {\n          index: index,\n          name: intersection.name,\n          stone: intersection.stone,\n          onIntersectionClick: () => playStone(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(TutorButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Handicap, {\n          onHandicapClick: () => handicapClick(history)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CurrentPlayer, {\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PassButton, {\n          passCount: passCount,\n          setPassCount: setPassCount,\n          currentMove: currentMove,\n          setCurrentMove: setCurrentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SaveButton, {\n          pastMoves: pastMoves,\n          blackIsNext: blackIsNext,\n          currentMove: currentMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(GoBoard, \"qRcYRwCSYf0dRF+BLv28e0tl1Gc=\");\n_c = GoBoard;\nexport default GoBoard;\nvar _c;\n$RefreshReg$(_c, \"GoBoard\");","map":{"version":3,"names":["React","useState","Intersection","BackArrow","ForwardArrow","PassButton","SaveButton","StyleBGButton","playstone","CurrentPlayer","TutorButton","Handicap","UserComponent","newBoard","findOpponentNeighbors","isCaptured","forwardInTime","backInTime","handicapClick","jsxDEV","_jsxDEV","Fragment","_Fragment","GoBoard","_s","history","setHistory","pastMoves","setPastMoves","currentMove","setCurrentMove","whiteStones","setWhiteStones","blackStones","setBlackStones","passCount","setPassCount","handicapLevel","setHandicapLevel","blackCaptures","setBlackCaptures","whiteCaptures","setWhiteCaptures","blackIsNext","playStone","index","audio","Audio","updatedHistory","JSON","parse","stringify","intersectionName","name","includes","play","stone","prevBlackStones","updatedBlackStones","prevWhiteStones","updatedWhiteStones","opponentNeighbors","capturedResult","position","indexOf","length","pastMovesForUpdate","push","children","className","onBackClick","fileName","_jsxFileName","lineNumber","columnNumber","onForwardClick","map","intersection","onIntersectionClick","onHandicapClick","_c","$RefreshReg$"],"sources":["/Users/tylerspicer/Desktop/Codesmith/solo-project/src/components/goboard.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\n// component imports\nimport Intersection from \"./intersection\";\nimport BackArrow from \"./back-arrow\";\nimport ForwardArrow from \"./forward-arrow\";\nimport PassButton from \"./pass-button\";\nimport SaveButton from \"./save-button\";\nimport StyleBGButton from \"./style-button\";\nimport playstone from \"../assets/playstone.mp3\";\nimport CurrentPlayer from \"./current-player\";\nimport TutorButton from \"./tutor-button\";\nimport Handicap from \"./handicap\";\nimport UserComponent from \"./current-user\";\n\n// utils imports\nimport newBoard from \"../utils/board-functions\";\nimport findOpponentNeighbors from \"../utils/find-neighbors\";\nimport isCaptured from \"../utils/is-captured\";\nimport { forwardInTime, backInTime } from \"../utils/time-travel\";\nimport handicapClick from \"../utils/handicap\";\n\n// accepts array of opponent stones and scans the groups looking for liberties (false) or\n\nfunction GoBoard() {\n  const [history, setHistory] = useState(newBoard());\n  const [pastMoves, setPastMoves] = useState([newBoard()]);\n  const [currentMove, setCurrentMove] = useState(1);\n  const [whiteStones, setWhiteStones] = useState([]);\n  const [blackStones, setBlackStones] = useState([]);\n  const [passCount, setPassCount] = useState(1);\n  const [handicapLevel, setHandicapLevel] = useState(0);\n  const [blackCaptures, setBlackCaptures] = useState(0);\n  const [whiteCaptures, setWhiteCaptures] = useState(0);\n  let blackIsNext = currentMove % 2 !== 0;\n\n  // console.log(history)\n\n  function playStone(index) {\n    const audio = new Audio(playstone);\n    const updatedHistory = JSON.parse(JSON.stringify(history));\n    const intersectionName = updatedHistory[index].name;\n    setPassCount(0);\n\n    if (\n      whiteStones.includes(intersectionName) ||\n      blackStones.includes(intersectionName)\n    ) {\n      return;\n    }\n\n    audio.play();\n\n    if (blackIsNext) {\n      updatedHistory[index].stone = \"⚫\";\n      setBlackStones((prevBlackStones) => {\n        const updatedBlackStones = [...prevBlackStones, intersectionName];\n        return updatedBlackStones;\n      });\n    } else {\n      updatedHistory[index].stone = \"⚪\";\n      setWhiteStones((prevWhiteStones) => {\n        const updatedWhiteStones = [...prevWhiteStones, intersectionName];\n        return updatedWhiteStones;\n      });\n    }\n\n    // capture logic before updating state\n    // console.log('index ', index)\n    const opponentNeighbors = findOpponentNeighbors(\n      history,\n      index,\n      currentMove\n    );\n\n    // console.log('opponentNeighbors', opponentNeighbors);\n    // console.log('currentMove ', currentMove, 'opponentNeighbors ', opponentNeighbors)\n\n    // console.log(\"updatedHistory \", updatedHistory);\n\n    const capturedResult = isCaptured(\n      updatedHistory,\n      currentMove,\n      opponentNeighbors\n    );\n\n    // console.log(\"capturedResult\", capturedResult);\n    // console.log('history before for loop ', history);\n\n    if (capturedResult) {\n      for (const position of updatedHistory) {\n        if (capturedResult.includes(updatedHistory.indexOf(position))) {\n          position.stone = null;\n        }\n      }\n    }\n\n    // console.log('history after for loop ', history);\n    // need to update white & black stone arrays\n    //update state once board has accounted for captures\n    // console.log(\"capturedResult length: \", capturedResult.length);\n\n    if (blackIsNext && capturedResult) {\n      setBlackCaptures(blackCaptures + capturedResult.length);\n    } else if (!blackIsNext && capturedResult) {\n      setWhiteCaptures(whiteCaptures + capturedResult.length);\n    }\n\n    setCurrentMove(currentMove + 1);\n    setHistory(updatedHistory);\n\n    const pastMovesForUpdate = [...pastMoves];\n    pastMovesForUpdate.push(JSON.parse(JSON.stringify(history)));\n    setPastMoves(pastMovesForUpdate);\n  }\n\n  // this function updates the boardstate when there is a stone in the place but not when it\n\n  return (\n    <>\n      <div className=\"bg-image\">\n        <div className=\"go-board\">\n          <BackArrow onBackClick={() => backInTime(currentMove, pastMoves)} />\n          <StyleBGButton />\n          <ForwardArrow\n            onForwardClick={() => forwardInTime(currentMove, pastMoves)}\n          />\n          <UserComponent\n            whiteCaptures={whiteCaptures}\n            blackCaptures={blackCaptures}\n            currentMove={currentMove}\n          />\n          {history.map((intersection, index) => (\n            <Intersection\n              key={index}\n              index={index}\n              name={intersection.name}\n              stone={intersection.stone}\n              onIntersectionClick={() => playStone(index)}\n            />\n          ))}\n          <TutorButton />\n          <Handicap onHandicapClick={() => handicapClick(history)} />\n          <CurrentPlayer currentMove={currentMove} />\n          <PassButton\n            passCount={passCount}\n            setPassCount={setPassCount}\n            currentMove={currentMove}\n            setCurrentMove={setCurrentMove}\n          />\n          <SaveButton\n            pastMoves={pastMoves}\n            blackIsNext={blackIsNext}\n            currentMove={currentMove}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default GoBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}